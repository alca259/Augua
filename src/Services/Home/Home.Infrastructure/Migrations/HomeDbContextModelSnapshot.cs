// <auto-generated />
using System;
using Home.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Home.Infrastructure.Migrations
{
    [DbContext(typeof(HomeDbContext))]
    partial class HomeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Home.Domain.Identity.AuthApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ClientId");

                    b.Property<string>("ClientSecret")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClientSecret");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ConcurrencyToken");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ConsentType");

                    b.Property<string>("DisplayName")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DisplayName");

                    b.Property<string>("DisplayNames")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DisplayNames");

                    b.Property<string>("Permissions")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Permissions");

                    b.Property<string>("PostLogoutRedirectUris")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PostLogoutRedirectUris");

                    b.Property<string>("Properties")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Properties");

                    b.Property<string>("RedirectUris")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RedirectUris");

                    b.Property<string>("Requirements")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Requirements");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("IX_AuthApplication_ClientId");

                    b.ToTable("AuthApplication", "Identity");
                });

            modelBuilder.Entity("Home.Domain.Identity.AuthAuthorization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint")
                        .HasColumnName("ApplicationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ConcurrencyToken");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationDate");

                    b.Property<string>("Properties")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Properties");

                    b.Property<string>("Scopes")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Scopes");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("Subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("IX_AuthAuthorization_ApplicationId_Status_Subject_Type");

                    b.ToTable("AuthAuthorization", "Identity");
                });

            modelBuilder.Entity("Home.Domain.Identity.AuthScope", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ConcurrencyToken");

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Descriptions")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Descriptions");

                    b.Property<string>("DisplayName")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DisplayName");

                    b.Property<string>("DisplayNames")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DisplayNames");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name");

                    b.Property<string>("Properties")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Properties");

                    b.Property<string>("Resources")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Resources");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_AuthScope_Name")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("AuthScope", "Identity");
                });

            modelBuilder.Entity("Home.Domain.Identity.AuthToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint")
                        .HasColumnName("ApplicationId");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("AuthorizationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ConcurrencyToken");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationDate");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpirationDate");

                    b.Property<string>("Payload")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Payload");

                    b.Property<string>("Properties")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Properties");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RedemptionDate");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ReferenceId");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("Subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId")
                        .HasDatabaseName("IX_AuthToken_AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasDatabaseName("IX_AuthToken_ReferenceId")
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("IX_AuthToken_ApplicationId_Status_Subject_Type");

                    b.ToTable("AuthToken", "Identity");
                });

            modelBuilder.Entity("Home.Domain.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("NormalizedName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "Identity");
                });

            modelBuilder.Entity("Home.Domain.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClaimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_Role_Claims");

                    b.ToTable("RoleClaim", "Identity");
                });

            modelBuilder.Entity("Home.Domain.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NormalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Uq_UserName");

                    b.ToTable("User", "Identity");
                });

            modelBuilder.Entity("Home.Domain.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Claim_Type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Claim_Value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", "Identity");
                });

            modelBuilder.Entity("Home.Domain.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("LoginProvider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("ProviderKey");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProviderDisplayName");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.ToTable("UserLogin", "Identity");
                });

            modelBuilder.Entity("Home.Domain.Identity.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("UserId");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "Identity");
                });

            modelBuilder.Entity("Home.Domain.Identity.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("UserId");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("LoginProvider");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "Identity");
                });

            modelBuilder.Entity("Home.Domain.Identity.AuthAuthorization", b =>
                {
                    b.HasOne("Home.Domain.Identity.AuthApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Home.Domain.Identity.AuthToken", b =>
                {
                    b.HasOne("Home.Domain.Identity.AuthApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Home.Domain.Identity.AuthAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("Home.Domain.Identity.UserClaim", b =>
                {
                    b.HasOne("Home.Domain.Identity.User", "FkUser")
                        .WithMany("FkUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("Home.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("Home.Domain.Identity.Role", "FkRole")
                        .WithMany("FkUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Home.Domain.Identity.User", "FkUser")
                        .WithMany("FkUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkRole");

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("Home.Domain.Identity.UserToken", b =>
                {
                    b.HasOne("Home.Domain.Identity.User", "FkUser")
                        .WithMany("FkUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("Home.Domain.Identity.AuthApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Home.Domain.Identity.AuthAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Home.Domain.Identity.Role", b =>
                {
                    b.Navigation("FkUserRoles");
                });

            modelBuilder.Entity("Home.Domain.Identity.User", b =>
                {
                    b.Navigation("FkUserClaims");

                    b.Navigation("FkUserRoles");

                    b.Navigation("FkUserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
